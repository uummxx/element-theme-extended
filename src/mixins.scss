@use 'sass:map';
@use 'sass:color';
@use 'sass:math';

@use 'element-plus/theme-chalk/src/mixins/var' as *;
@use './themes.scss' as *;

@mixin f-set-css-color-rgb($themes, $type, $theme: '') {
  $color: map.get($themes, $theme, $type);
  @if $color!=null {
    @include set-css-var-value(
      ('color', $type, 'rgb'),
      #{color.channel($color, 'red'),
      color.channel($color, 'green'),
      color.channel($color, 'blue')}
    );
  }
}

@mixin f-set-css-color-type($themes, $type, $theme: '') {
  $baseColor: map.get($themes, $theme, $type);
  @if $baseColor!=null {
    @include set-css-var-value(('color', $type), $baseColor);
  }
  @each $i in (3, 5, 7, 8, 9) {
    $color: map.get($themes, $theme, '#{$type}-light-#{$i}');
    @if $color!=null {
      @include set-css-var-value(('color', $type, 'light', $i), $color);
    }
  }
  $color: map.get($themes, $theme, '#{$type}-dark-2');
  @if $color!=null {
    @include set-css-var-value(('color', $type, 'dark', 2), $color);
  }
}

@mixin generate-css-vars($themes, $is-dark: false) {
  $mode: if($is-dark, '.dark', '');
  :root {
    @if ($is-dark==false) {
      @each $type in (primary, success, warning, danger, error, info) {
        @include f-set-css-color-rgb($themes, $type, '');
        @include f-set-css-color-type($themes, $type);
      }
    }
  }
  html#{$mode} {
    // hex colors
    color-scheme: if($is-dark, dark, light);
    @if ($is-dark) {
      @each $type in (primary, success, warning, danger, error, info) {
        @include f-set-css-color-rgb($themes, $type, '');
        @include f-set-css-color-type($themes, $type);
      }
    }
    @each $theme, $_ in $themes {
      @if $theme != '' {
        &.#{$theme} {
          @each $type in $types {
            @include f-set-css-color-type($themes, $type, $theme);
            @include f-set-css-color-rgb($themes, $type, $theme);
          }
        }
      }
    }
    @content;
  }
}
